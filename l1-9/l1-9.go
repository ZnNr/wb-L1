package main

import "fmt"

/*
Разработать конвейер чисел.
Даны два канала: в первый пишутся числа (x) из массива,
во второй — результат операции x*2,
после чего данные из второго канала должны выводиться в stdout.
*/

func main() {
	// Исходный массив чисел
	numbers := []int{1, 2, 3, 4, 5}

	// Каналы для передачи данных
	inputChannel := make(chan int)  // Канал для входящих чисел
	outputChannel := make(chan int) // Канал для исходящих результатов

	// Горутина для чтения чисел из массива и отправки в входной канал
	go func() {
		for _, num := range numbers {
			inputChannel <- num // Отправляем число в входной канал
		}
		close(inputChannel) // Закрываем канал, когда все числа отправлены
	}()

	// Горутина для обработки чисел и отправки результатов во второй канал
	go func() {
		for num := range inputChannel {
			result := num * 2       // Умножаем число на 2
			outputChannel <- result // Отправляем результат в выходной канал
		}
		close(outputChannel) // Закрываем канал результатов
	}()

	// Чтение результатов из выходного канала и вывод в stdout
	for result := range outputChannel {
		fmt.Println(result) // Печатаем результат
	}
}

/*
Объяснение кода
Объявление массива:
Мы создаём массив numbers, содержащий числа, которые нужно обработать.
Создание каналов:
inputChannel: используется для передачи исходных чисел из массива.
outputChannel: используется для передачи результатов (чисел, умноженных на 2).
Горутина для ввода чисел:
Эта горутина перебирает массив numbers и отправляет каждое число в inputChannel. После того как все числа отправлены, она закрывает канал.
Горутина для обработки чисел:
Эта горутина читает числа из inputChannel, умножает их на 2 и отправляет результаты в outputChannel. Когда inputChannel закрыт и все числа обработаны, канал результатов также закрывается.
Основная функция:
Главная функция читает результаты из outputChannel и выводит их на экран в стандартный вывод (stdout).

*/
