package main

import (
	"fmt"
	"sync"
	"time"
)

/*
Написать программу, которая конкурентно рассчитает
значение квадратов чисел взятых из массива (2,4,6,8,10)
и выведет их квадраты в stdout.
*/

// Функция для расчета квадратов чисел
func calculateSquare(wg *sync.WaitGroup, num int) {
	defer wg.Done()
	square := num * num
	fmt.Printf("Время: %s | Квадрат числа %d равен %d\n", time.Now().Format("15:04:05.999999999"), num, square)
}

func main() {
	// Создаем массив чисел
	numbers := []int{2, 4, 6, 8, 10}
	start := time.Now()

	// Инициализируем WaitGroup
	var wg sync.WaitGroup

	// Запускаем горутину для каждого числа в массиве
	for _, num := range numbers {
		wg.Add(1)
		go calculateSquare(&wg, num)
	}

	// Ждем завершения всех горутин
	wg.Wait()

	// Устанавливаем общее время после ждания всех горутин
	elapsedTime := time.Since(start)
	fmt.Printf("Общее время выполнения: %d ms или %d ns\n", elapsedTime.Milliseconds(), elapsedTime.Nanoseconds())
}

/*
Объяснение:
1. Массив чисел: Создаем массив numbers, содержащий числа, квадраты которых нужно рассчитать.
2. WaitGroup: Используем sync.WaitGroup для ожидания завершения всех горутин перед завершением программы.
3. Горутины: Для каждого числа в массиве запускаем отдельную горутину, которая вычисляет квадрат числа и выводит результат.
4. Синхронизация: Метод wg.Add(1) используется для увеличения счетчика горутин в WaitGroup, а wg.Done() — для его уменьшения после завершения работы горутины.
5. Ожидание завершения: Метод wg.Wait() блокирует выполнение до тех пор, пока счетчик WaitGroup не станет равным нулю, то есть пока все горутины не завершат выполнение.

Вывод текущего времени с точностью до нано секунд: Используется паттерн 15:04:05.999999999.
Общее время выполнения в миллисекундах и наносекундах: Используется elapsedTime.Milliseconds(), elapsedTime.Nanoseconds().

 Есть несколько факторов, которые могут влиять на общее время выполнения:

1. Создание и переключение контекста горутин: Хотя горутины легковесные, управление ими все же занимает определенное количество времени на переключение контекста, особенно если их много или они создаются динамически.
2. Вывод на консоль: Время, затраченное на запись в консоль, может быть значительным по сравнению с самим вычислением квадрата числа. Вывод на консоль может создавать узкое место, потому что все горутины стараются писать одновременно.
3. Общее управление потоками: Планировщик Go должен управлять всеми запущенными горутинами, что может потребовать некоторых ресурсов и времени.
4. Тайминги и точность измерения: Используемая вами функция time.Since может не всегда давать абсолютно точные результаты из-за особенностей измерения времени на компьютере, если требуется большая точность, использование специализированных инструментов профилирования может дать точную оценку.
*/
