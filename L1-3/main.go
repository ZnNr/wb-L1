package main

import (
	"fmt"
	"sync"
	"time"
)

/*
Дана последовательность чисел: 2,4,6,8,10.

Найти сумму их квадратов(22+32+42….) с использованием конкурентных вычислений.

*/
// Функция для расчета квадрата числа и добавления к общей сумме
func calculateSquareAndAdd(num int, sum *int, mu *sync.Mutex, wg *sync.WaitGroup) {
	defer wg.Done()

	// Измеряем время начала вычисления
	start := time.Now()

	square := num * num

	// Блокируем доступ к сумме для безопасной записи
	mu.Lock()
	*sum += square
	mu.Unlock()

	// Измеряем и выводим время, затраченное на вычисление
	elapsed := time.Since(start)
	fmt.Printf("Время выполнения для числа %d: %v наносекунд\n", num, elapsed.Nanoseconds())
}

func main() {
	// Исходный массив чисел
	numbers := []int{2, 4, 6, 8, 10}

	// Переменные для хранения суммы и синхронизации
	var sum int
	var wg sync.WaitGroup
	var mu sync.Mutex

	// Измеряем общее время выполнения программы
	totalStart := time.Now()

	// Запускаем горутину для каждого числа в массиве
	for _, num := range numbers {
		wg.Add(1)
		go calculateSquareAndAdd(num, &sum, &mu, &wg)
	}

	// Ждем завершения всех горутин
	wg.Wait()

	// Выводим общий результат
	fmt.Printf("Сумма квадратов чисел: %d\n", sum)

	// Измеряем и выводим общее время выполнения программы
	totalElapsed := time.Since(totalStart)
	fmt.Printf("Общее время выполнения программы: %v наносекунд\n", totalElapsed.Nanoseconds())
}

/*

Объяснение:
1. Массив чисел: Мы используем массив numbers, содержащий числа, квадраты которых нужно сложить.
2. Переменные синхронизации:
- sum для хранения общей суммы квадратов.
- sync.Mutex для обеспечения безопасного доступа к sum.
3. Горутины: Для каждого числа запускается горутина, которая:
- Вычисляет квадрат числа.
- Блокирует Mutex для добавления этого квадрата к общей сумме.
- Разблокирует Mutex после обновления суммы.
4. WaitGroup: Горутины синхронизируются с помощью waitgroup для ожидания их завершения перед тем, как программа выведет окончательный результат.
Этот код безопасно и эффективно рассчитывает сумму квадратов чисел с использованием конкурентных вычислений в Go.

*/
