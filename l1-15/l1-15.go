package main

import "fmt"

/*
К каким негативным последствиям может привести данный фрагмент кода, и как это исправить? Приведите корректный пример реализации.

var justString string
func someFunc() {
  v := createHugeString(1 << 10)
  justString = v[:100]
}
func main() {
  someFunc()
}
*/

/*
Фрагмент кода может привести к нескольким негативным последствиям,
связанным с управлением памятью, особенно из-за потенциальной утечки памяти.

Негативные последствия
1. Утечка памяти:
В функции createHugeString создается строка большого размера.
Если вы присваиваете только часть этой строки переменной justString,
то ссылка на большую строку все еще хранится в памяти,
даже если она вам не нужна. Это может привести к значительным затратам памяти,
если эта операция будет выполняться несколько раз.
2. Проблема с копированием:
В Go строки — это неизменяемый тип. Когда вы делаете justString = v[:100],
в памяти все еще остается оригинальная большая строка v,
на которую ссылается переменная justString.
Хотя вы используете только часть этой строки,
большая часть все равно останется в памяти, пока на неё существует ссылка.
*/

var justString string

// Функция для создания большой строки
func createHugeString(size int) string {
	// Создание строки - для примера используем простое повторение символа
	return string(make([]byte, size)) // Замените это на желаемое содержание
}

func someFunc() {
	v := createHugeString(1 << 10)
	justString = string([]rune(v)[:100]) // Создаем новую строку только из первых 100 символов
}

func main() {
	someFunc()
	fmt.Println("Длина строки:", len(justString))
}
