package main

import (
	"fmt"
	"sync"
)

/*
Реализовать структуру-счетчик, которая будет инкрементироваться в конкурентной среде.
По завершению программа должна выводить итоговое значение счетчика.
*/

/*
Для реализации конкурентного счетчика можно использовать пакет sync
*/

// Счетчик
type Counter struct {
	mu    sync.Mutex
	value int
}

// Метод для инкрементации счетчика
func (c *Counter) Increment() {
	c.mu.Lock()         // Блокируем мьютекс перед изменением значения
	defer c.mu.Unlock() // Освобождаем мьютекс после завершения функции
	c.value++
}

// Метод для получения текущего значения счетчика
func (c *Counter) Value() int {
	c.mu.Lock()         // Блокируем мьютекс перед чтением значения
	defer c.mu.Unlock() // Освобождаем мьютекс после чтения
	return c.value
}

func main() {
	var wg sync.WaitGroup
	counter := Counter{}

	// Запускаем 10 горутин, каждая из которых инкрементирует счетчик 1000 раз
	for i := 0; i < 10; i++ {
		wg.Add(1)
		go func() {
			defer wg.Done()
			for j := 0; j < 1000; j++ {
				counter.Increment()
			}
		}()
	}

	// Ждем завершения всех горутин
	wg.Wait()

	// Выводим итоговое значение счетчика
	fmt.Println("Итоговое значение счетчика:", counter.Value())
}
